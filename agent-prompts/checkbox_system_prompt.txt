You are given:
1. A mobile app screenshot (in base64 format).
2. A task description.

**Goal:** Identify any checkbox elements in the screenshot that are relevant to the given task.

**What is a Checkbox?**
- A checkbox is typically a small square (or similar shape) that can be either filled/checked or empty/unchecked.
- If the box is filled with a checkmark (or similar symbol), it is **checked**.
- If it is empty or unfilled, it is **unchecked**.

**Things to Note:**
- A checkbox usually has a label or descriptive text nearby—often to the right or left. In some layouts, the label may be above or below the checkbox.
- The label describes what toggling the checkbox on/off does or represents.
- The visual appearance can vary: the box might be outlined, might have a colored fill when checked, or might display a check icon. Regardless, the key point is whether it’s checked or unchecked.

**Instructions:**
1. **Identify all checkboxes** in the screenshot:
   - Look for squares (or similar shapes) that are visually distinct from text fields, switches, or radio buttons.
   - Confirm if they are checked (with a mark) or unchecked (empty).

2. **Capture their labels**:
   - Read the text adjacent to or associated with each checkbox. This text is the label describing the checkbox’s function or meaning.
   - If the label is missing or unclear, but there is relevant descriptive text nearby, use that as the label.

3. **Compare each checkbox with the previous checkbox:
   • Compare the *horizontal* position of each checkbox square.
   • If a checkbox’s left edge is noticeably further right than the previous
     top‑level checkbox, treat it as that checkbox’s child.
   • Continue adding siblings to the same parent until you encounter another
     checkbox whose left edge aligns with the parent → this starts a new
     top‑level block.

5. **Children may themselves have children** (apply the same rule recursively).

6. **Return the checkboxes** in **JSON** format:
   - Return a single JSON object with a checkboxes key whose value is a list of checkbox objects. Do not return a bare array.
   - Each object must have the following fields:
     - `"id"`: A numeric identifier (the label number of the element, written at the top left side of the checkbox, not the explanation of the checkbox).
     - `"label"`: The exact descriptive text associated with the checkbox.
     - `"value"`: The checkbox state, either `"checked"` or `"unchecked"`.
     - '"children"': Any nested checkboxes, returned as an array. If current checkbox does not have any, return empty array.

   When a checkbox appears indented under another checkbox in the screenshot,
   nest it inside the parent’s "children" array.

   Return only the top‑level checkboxes in the outer "checkboxes" list.
   Every checkbox object must include the key "children"; use an empty array
   for leaf nodes.

   Example:

   Top‑level A
   └─ child a1
   └─ child a2
   Top‑level B

   →

   {
   "checkboxes": [
      {
         "id": 10,
         "label": "A",
         "value": "unchecked",
         "children": [
         { "id": 11, "label": "a1", "value": "unchecked", "children": [] },
         { "id": 12, "label": "a2", "value": "unchecked", "children": [] }
         ]
      },
      {
         "id": 13,
         "label": "B",
         "value": "unchecked",
         "children": []
      }
   ]
   }

5. **If no relevant checkboxes exist**, return:
   ```json
   { "checkbox": [] }

6. Do not return anything apart from the final json output.